<?xml version="1.0" encoding="UTF-8"?>
<!-- 不分级别同步文件日志输出配置 -->
<configuration>
    <!-- 日志级别 -->
    <property name="logLevel" value="info"></property>
    <!-- 日志地址 -->
    <property name="logPath" value="/var/local/logs/"></property>
    <!-- 异步缓冲队列的深度,该值会影响性能.默认值为256 -->
    <property name="queueSize" value="512"></property>

    <!--    scan:-->
    <!--    当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。（这个功能可以在不重启运行环境下，调整打印日志的细节，方便定位问题）-->
    <!--    scanPeriod:-->
    <!--    设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。-->
    <!--    debug:-->
    <!--    当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->

    <!--    Logger 可以被分配级别。级别包括：TRACE、DEBUG、INFO、WARN 和 ERROR-->

    <!--    级别排序为： TRACE < DEBUG < INFO < WARN < ERROR-->
    <!--    &lt;!&ndash;  &ndash;&gt;-->
    <!--    logger：日志所处的包-->
    <!--    level：日志打印级别-->
    <logger name="org.springframework.web.client" level="DEBUG"/>
    <logger name="org.springframework" level="WARN"/>
    <logger name="org.apache.activemq" level="INFO"/>
    <logger name="org.apache.zookeeper" level="INFO"/>
    <!--    com.alibaba.dubbo是dubbo服务的包，在如何是info一下的级别会产生大量的启动日志，调成WARN减少日志输出-->
    <logger name="com.alibaba.dubbo" level="WARN"/>
    <!--    com.ztev.audit.dao是本项目的dao层的包，把这个包的打印日志级别调成 DEBUG级别可以看到sql执行-->
    <logger name="org.spring.io.gateway" level="DEBUG"/>

    <!-- 控制台打印日志的相关配置 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 日志格式 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} %-4relative [%thread] %-5level %logger{35} [%line] - %msg %n</pattern>
        </encoder>
    </appender>

    <!--文件输出的格式设置 -->
    <appender name="FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 文件输出的日志 的格式 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} %-4relative [%thread] %-5level %logger{35} [%line] - %msg %n</pattern>
            <charset>UTF-8</charset> <!-- 此处设置字符集，防止中文乱码 -->
        </encoder>

        <!--    样例：-->
        <!--    [ INFO ]     [2017-06-09 15:15:59]      org.apache.tomcat.util.net.NioSelectorPool [179] - Using a shared selector for servlet-->
        <!--    [ %-5level]  [%date{yyyy-MM-dd HH:mm:ss}]  %logger{96}                             [%line]   %msg%n、-->
        <!--    level日志级别  时间                          打印日志所处包.类                          出现代码行  日志信息-->


        <!-- 配置日志所生成的目录以及生成文件名的规则 在logs/mylog-2016-10-31.0.log -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${logPath}/common-gateway_log-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 最大64MB 超过最大值，会重新建一个文件-->
                <maxFileSize>10 MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <!--    <filter>:-->
        <!--    过滤器，执行一个过滤器会有返回个枚举值，即DENY，NEUTRAL，ACCEPT其中之一。返回DENY，日志将立即被抛弃不再经过其他过滤器；返回NEUTRAL，有序列表里的下个过滤器过接着处理日志；返回ACCEPT，日志会被立即处理，不再经过剩余过滤器。-->
        <!--    过滤器被添加到<appender> 中，为<appender> 添加一个或多个过滤器后，可以用任意条件对日志进行过滤。<appender> 有多个过滤器时，按照配置顺序执行。-->


        <!--        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
        <!--            <level>DEBUG</level>-->
        <!--        </filter>-->
        <!-- Safely log to the same file from multiple JVMs. Degrades performance! -->
        <!--    <prudent>：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。-->
        <prudent>true</prudent>
    </appender>


    <!--配置mybatis sql 日志-->
    <logger name="com.pf.org.cms.mapper" level="DEBUG"/>
    <!-- 基于INFO处理日志：具体控制台或者文件对日志级别的处理还要看所在appender配置的filter，如果没有配置filter，则使用root配置 -->
    <!-- root：
也是<loger>元素，但是它是根loger。只有一个level属性，应为已经被命名为"root".
level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。 -->
    <root level="${logLevel}">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE"/>
    </root>
</configuration>